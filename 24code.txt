from fastapi import FastAPI,HTTPException
from typing import List
from mongoengine import connect,Document,StringField,IntField

app = FastAPI()


MONGO_URI ="mongodb+srv://chandanachandran3158:chandana33@cluster0.oz7fv.mongodb.net/Users?retryWrites=true&w=majority&appName=Cluster0"
connect(host=MONGO_URI)



class User(Document):
    username = StringField(required=True)
    email = StringField(required=True,)
    password = StringField(required=True)
    age = IntField(required=True)


@app.get("/")
def read_root():
    return {"message": "FastAPI is running!"}



@app.post("/users/")
def create_user(user: dict):
    if User.objects(email=user["email"]):
        return {
            "status_code": 400,
            "description": "User with this email already exists",
            "status": False,
            "data": []
        }
    new_user=User(user.dict()).save()
    return {
        "status_code": 200,
        "description": "User created successfully",
        "status": True,
        "data": [new_user.to_mongo().to_dict()]
    }



@app.post("/users/update/{email}")
def update_user(email: str, username: str = None, password: str = None, age: int = None):
    existing_user = User.objects(email=email).first()
    update_data = {}
    if username: update_data["username"] = username
    if password: update_data["password"] = password
    if age: update_data["age"] = age
    existing_user.update(**update_data)
    return {
        "status_code": 200,
        "description": "User updated successfully",
        "status": True,
        "data": []
    }








@app.delete("/users/{email}")
def delete_user(email: str):
    user = User.objects(email=email).first()
    user.delete()
    return {
        "status_code": 200,
        "description": "User deleted successfully",
        "status": True,
        "data": []
    }



@app.get("/users/")
def list_users():
    users = User.objects().exclude("id")
    return {
        "status_code": 200,
        "description": "Users retrieved successfully",
        "status": True,
        "data": [user.to_mongo().to_dict() for user in users]
    }
